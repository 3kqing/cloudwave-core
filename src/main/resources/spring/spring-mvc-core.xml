<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	
	<import resource="spring-mvc-view.xml"/>
	
	
	<context:annotation-config />

	<!--
        - POJOs labeled with the @Controller and @Service annotations are auto-detected.
    -->
	<!-- 有@Controller的POJO将会被自动扫描 -->
	<context:component-scan base-package="com.cloudwave" use-default-filters="false">
	<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" /> -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	
	<!-- <mvc:annotation-driven conversion-service="conversionService"/> -->
	
	<!--自动扫描@Controller注解 -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" conversion-service="conversionService">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <value>
	            json=application/json
	            xml=application/xml
	        </value>
	    </property>
	</bean>
	<!-- WEB工具类,提供数据绑定的转换,例如时间格式的转换. -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="formatters">
            <set>
                <bean class="org.springframework.samples.petclinic.web.PetTypeFormatter"/>
            </set>
        </property>
    </bean>




	<!-- 定义无需Controller的url<->view直接映射 -->
	<mvc:view-controller path="/" view-name="index"/>
	<!-- <mvc:view-controller path="/web/mashup-client" view-name="/web/mashup-client"/> -->
	<!-- 
	<mvc:resources location="/static/" mapping="/static/**"/>
        <mvc:resources location="/themes/" mapping="/themes/**"/>
        <mvc:view-controller path="/500" view-name="500"/> 
        <mvc:view-controller path="/404" view-name="404"/> 
	 -->

	<!-- 定义JSP文件的位置 -->  
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<!-- 测试环境时还是不要抛出到View -->
	<!-- 
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
		<property name="exceptionMappings">  
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
            </props>
		</property>  
    </bean>
	 -->
    


	<!--自动注册:自定义字符编码和JSON解析类 -->
	<!-- <mvc:annotation-driven> <mvc:message-converters register-defaults="true"> 
		<bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
		<constructor-arg value="UTF-8" /> </bean> <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
		<property name="objectMapper"> <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"> 
		<property name="failOnEmptyBeans" value="false" /> </bean> </property> </bean> 
		</mvc:message-converters> </mvc:annotation-driven> -->

	<!-- 启用Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" 
		/> <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" 
		/> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" 
		/> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"> 
		<property name="messageConverters"> <list> <ref bean="mappingJacksonHttpMessageConverter"/> 
		</list> </property> </bean> <bean id="mappingJacksonHttpMessageConverter" 
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>application/json; charset=UTF-8</value> 
		</list> </property> </bean> -->

	<!--  annotation默认的方法映射适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" 
		/> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		/> -->
	<!-- HandlerMapping -->
	<!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/> -->

	<!-- HandlerAdapter -->
	<!-- <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/> -->

	<!-- <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" 
		/> -->

	<bean name="/parameterizableView"
		class="org.springframework.web.servlet.mvc.ParameterizableViewController">
		<property name="viewName" value="success" />
	</bean>
	<!-- 参数化视图控制器，不进行功能处理（即静态视图） -->
	<bean name="/*.html"
		class="org.springframework.web.servlet.mvc.UrlFilenameViewController" />




	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />


	<!-- <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"> 
		<property name="viewResolvers"> <map> -->
	<!-- 告诉视图解析器，返回的类型为json格式 -->
	<!--<entry key="json" value="application/json" /> </map> </property> <property 
		name="defaultViews"> <list> -->
	<!-- ModelAndView里的数据变成JSON -->
	<!--<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" 
		/> </list> </property> </bean> -->


	<!-- <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> 
		<property name="supportedMediaTypes" value="application/json" /> </bean> -->
	<!-- 拦截器 -->
	<!-- <mvc:interceptors> <bean class="cwcore.com.cloudwave.web.inteceptor.SystemInteceptor" 
		/> </mvc:interceptors> -->
	<!--会导致org.springframework.web.servlet.handler.MappedInterceptor not found错误 -->



	<!-- 对静态资源文件的访问 方案一 （二选一） -->
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->
	<mvc:default-servlet-handler />

	<!-- 对静态资源文件的访问 方案二 （二选一） -->
	<!-- <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/> 
		<mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/> 
		<mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/> -->
	<!-- 注册上传组件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxInMemorySize" value="4096" />
		<property name="maxUploadSize" value="5368709120" />
		<property name="uploadTempDir" value="temp" /> <!-- 这里貌似不能用绝对路径 -->
	</bean>

	<!-- <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"> 
		<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"> 
		<property name="mediaTypes" > <value> json=application/json xml=application/xml 
		</value> </property> </bean> -->
	<!-- <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"> 
		<property name="mediaTypes" > <map> 告诉视图解析器，返回的类型为json格式 <entry key="json" 
		value="application/json" /> </map> </property> <property name="defaultViews"> 
		<list> ModelAndView里的数据变成JSON <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" 
		/> </list> </property> </bean> -->
</beans>